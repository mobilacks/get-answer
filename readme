# **Automated Screenshot-to-ChatGPT Answer System**

## **Overview**
This document details the step-by-step process of creating a Python-based system that allows users to:
- Take a **screenshot** of a selected portion of the screen.
- **Extract text** from the screenshot using OCR (Optical Character Recognition).
- **Send the extracted text** to ChatGPT for an answer.
- **Display the response** in a popup window.
- Optionally, trigger the script using a **global hotkey**.

---

## **Step-by-Step Implementation**

### **1Ô∏è‚É£ Install Required Software & Libraries**
Before we begin coding, install the necessary dependencies:

### **Install Python (if not already installed)**
- Download and install Python from [https://www.python.org/downloads/](https://www.python.org/downloads/)
- During installation, ensure **"Add Python to PATH"** is selected.

### **Install Required Python Libraries**
Open **Command Prompt (CMD)** and run:
```bash
pip install pyautogui pillow pytesseract openai
```

### **Install Tesseract OCR**
Tesseract OCR is required for text extraction from images.
- Download: [https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract)
- Install it, and note the installation path (e.g., `C:\Users\xxxx\AppData\Local\Programs\Tesseract-OCR`)
- Add this path to your **System Environment Variables**

Verify installation by running:
```bash
tesseract --version
```

---

### **2Ô∏è‚É£ Writing the Python Script**

#### **Import Required Libraries**
```python
import pyautogui
import pytesseract
from PIL import ImageGrab
import tkinter as tk
from tkinter import messagebox
from openai import OpenAI
```

#### **Set Up Tesseract OCR & OpenAI API Key**
```python
# Set Tesseract path
pytesseract.pytesseract.tesseract_cmd = r'C:\Users\xxxx\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'

# OpenAI API Key
client = OpenAI(api_key="your_openai_api_key_here")
```

#### **Create a Click-and-Drag Selection Tool**
```python
# Global variables for selection box
start_x, start_y, end_x, end_y = 0, 0, 0, 0

def capture_region():
    global start_x, start_y, end_x, end_y

    root = tk.Tk()
    root.attributes("-alpha", 0.3)  # Transparent overlay
    root.attributes("-fullscreen", True)
    root.title("Select Area")

    canvas = tk.Canvas(root, cursor="cross", bg="black")
    canvas.pack(fill=tk.BOTH, expand=True)

    def on_click(event):
        global start_x, start_y
        start_x, start_y = event.x, event.y
        canvas.delete("rect")

    def on_drag(event):
        global end_x, end_y
        end_x, end_y = event.x, event.y
        canvas.delete("rect")
        canvas.create_rectangle(start_x, start_y, end_x, end_y, outline="red", width=2, tags="rect")

    def on_release(event):
        global start_x, start_y, end_x, end_y
        root.destroy()

    canvas.bind("<ButtonPress-1>", on_click)
    canvas.bind("<B1-Motion>", on_drag)
    canvas.bind("<ButtonRelease-1>", on_release)
    root.mainloop()

    x1, y1 = min(start_x, end_x), min(start_y, end_y)
    x2, y2 = max(start_x, end_x), max(start_y, end_y)
    return ImageGrab.grab(bbox=(x1, y1, x2, y2))
```

#### **Extract Text Using OCR**
```python
def extract_text(image):
    return pytesseract.image_to_string(image)
```

#### **Send Question to ChatGPT**
```python
def ask_chatgpt(question_text):
    prompt = f"""
    This is a physics/economics/mathematics question. Solve it step-by-step and provide the correct answer:
    
    {question_text}
    """
    
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip()
```

#### **Show a Pop-up with ChatGPT‚Äôs Answer**
```python
def show_popup(title, message):
    root = tk.Tk()
    root.withdraw()
    messagebox.showinfo(title, message)
```

#### **Main Function to Capture Screenshot, Process Text, and Get Answer**
```python
def main():
    try:
        screenshot = capture_region()
        extracted_text = extract_text(screenshot)
        
        if not extracted_text.strip():
            show_popup("No Text Detected", "Try again. No readable text found in the selected area.")
            return

        answer = ask_chatgpt(extracted_text)
        show_popup("ChatGPT Answer", answer)
    except Exception as e:
        show_popup("Error", str(e))

if __name__ == "__main__":
    main()
```

---

### **3Ô∏è‚É£ Running the Script**
1. Save the script as `get_answer.py`
2. Open **Command Prompt** in the script folder
3. Run:
   ```bash
   python get_answer.py
   ```
4. **Click and drag** over the question on your screen
5. ChatGPT will provide the answer in a pop-up

---

### **4Ô∏è‚É£ Adding a Global Hotkey (Optional)**
If you want to trigger this script using a keyboard shortcut (`Ctrl + Alt + S`):
1. Install `keyboard` library:
   ```bash
   pip install keyboard
   ```
2. Modify your script:
   ```python
   import keyboard
   keyboard.add_hotkey("ctrl+alt+s", main)
   keyboard.wait()
   ```
3. Run the script and press `Ctrl + Alt + S` to trigger it anytime!

---

## **Conclusion**
You now have a fully automated system that:
‚úî Takes a **screenshot of selected text**
‚úî Extracts the **text using OCR**
‚úî Sends the **question to ChatGPT**
‚úî Shows the **answer in a pop-up**
‚úî Can be triggered with a **global hotkey** (optional)

This method is useful for **exams, research, problem-solving, and automation!** üöÄ

